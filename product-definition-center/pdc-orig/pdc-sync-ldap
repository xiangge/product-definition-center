#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Update all users in database with new information retrieved from LDAP server.
"""

import os
import ldap
import django
from optparse import OptionParser


SERVICE_NAME_SEPARATOR = '/'


def process_raw_ldap_data(groups):
    """
    Take data from LDAP and return mapping from group names to list of users.
    """
    result = {}
    for group in groups[1:]:
        if 'cn' not in group[1] or 'memberUid' not in group[1]:
            continue
        group_name = group[1]['cn'][0]
        members = group[1]['memberUid']
        if members == [group_name]:
            continue    # Skip user groups
        result[group_name] = members
    return result


def process_inactive_user(user):
    user.is_active = False
    user.groups.clear()
    user.save()


if __name__ == '__main__':
    usage = """%prog -s <Django settings module>"""
    parser = OptionParser(usage)
    parser.add_option("-s", "--settings", help="Django settings module, default is pdc.settings",
                      dest='settings_module', default='pdc.settings')
    options, args = parser.parse_args()

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', options.settings_module)
    django.setup()
    from django.contrib.auth import get_user_model, models
    from django.conf import settings
    from pdc.apps.auth import backends

    try:
        conn = ldap.initialize(settings.LDAP_URI)

        groups = conn.search_s(settings.LDAP_GROUPS_DN, ldap.SCOPE_SUBTREE)
        groups = process_raw_ldap_data(groups)
        active_member_set = set([])

        for user in get_user_model().objects.all():
            data = backends.get_ldap_user(conn, user.username)
            if not data:
                if SERVICE_NAME_SEPARATOR not in user.username:
                    process_inactive_user(user)
                continue
            del data['login']
            user_groups = set()

            for group, members in groups.iteritems():
                if user.username in members:
                    g, _ = models.Group.objects.get_or_create(name=group)
                    user_groups.add(g.id)

            user.full_name = data["full_name"]
            user.email = data["email"]
            user.groups = sorted(user_groups)
            user.save()

    finally:
        conn.unbind()
